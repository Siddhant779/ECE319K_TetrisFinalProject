


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; SSD1306_OutChar   outputs a single 8-bit ASCII charact
                       er
   10 00000000         ; SSD1306_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           SSD1306_OutChar
   13 00000000                 IMPORT           SSD1306_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000                 PRESERVE8
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000 00000004 
                       N       EQU              4
   21 00000000 00000000 
                       CNT     EQU              0
   22 00000000        B 
                       FP      RN               11
   23 00000000         
   24 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000000         ; Output a 32-bit number in unsigned decimal format
   26 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000000         ; Output: none
   28 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000000         LCD_OutDec
   30 00000000 F84D BD04       PUSH{FP}                     ; saving the value 
                                                            from register 11
   31 00000004 B401            PUSH{R0}                     ; storing the unsig
                                                            ned number on the s
                                                            tack
   32 00000006 B081            SUB              SP, #4      ; the space for cou
                                                            nt 
   33 00000008 46EB            MOV              FP, SP      ; making the frame 
                                                            pointer into R11 
   34 0000000A B500            PUSH             {LR}
   35 0000000C F04F 0100       MOV              R1, #0      ;making the count v
                                                            alue 0 and storing 
                                                            it back
   36 00000010 F8CB 1000       STR              R1, [FP,#CNT]
   37 00000014 F8DB 1000 
                       moDiv   LDR              R1, [FP,#CNT] ; this is the sta
                                                            rt of the read loop
                                                            
   38 00000018 F101 0101       ADD              R1, #1      ; adding one to the
                                                             count value 



ARM Macro Assembler    Page 2 


   39 0000001C F8CB 1000       STR              R1, [FP,#CNT]
   40 00000020 F04F 010A       MOV              R1, #10     ; this will be for 
                                                            dividing the number
                                                             
   41 00000024 F8DB 2004       LDR              R2, [FP,#N]
   42 00000028 4613            MOV              R3,R2       ;making another cop
                                                            y of the number 
   43 0000002A FBB2 F2F1       UDIV             R2, R2, R1  ; storing the divid
                                                            ed number back into
                                                             n
   44 0000002E F8CB 2004       STR              R2, [FP,#N]
   45 00000032 FB02 F201       MUL              R2, R2, R1
   46 00000036 EBA3 0302       SUB              R3, R3, R2
   47 0000003A B408            PUSH{R3}                     ; storing the diffe
                                                            rence on the stack-
                                                             contains the lowes
                                                            t weighted digit 
   48 0000003C F8DB 1004       LDR              R1, [FP,#N]
   49 00000040 3100            ADDS             R1, #0
   50 00000042 D1E7            BNE              moDiv
   51 00000044 BC01    wri     POP{R0}                      ; popping value fro
                                                            m stack and it gets
                                                             stored into R0 - t
                                                            his is the write lo
                                                            op
   52 00000046 F100 0030       ADD              R0,R0, #0x30 ; making the ascii
                                                             value 
   53 0000004A F7FF FFFE       BL               SSD1306_OutChar 
                                                            ;outputs the number
                                                            
   54 0000004E F8DB 1000       LDR              R1, [FP,#CNT] ;loading the coun
                                                            t value to subtract
                                                             
   55 00000052 F1A1 0101       SUB              R1, #1
   56 00000056 F8CB 1000       STR              R1, [FP,#CNT]
   57 0000005A F8DB 1000       LDR              R1, [FP,#CNT] ; checking if the
                                                             value of count is 
                                                            0 yet 
   58 0000005E 2900            CMP              R1, #0
   59 00000060 D8F0            BHI              wri         ; if the count valu
                                                            e is still not 0 th
                                                            en loop back
   60 00000062 F85D EB04       POP{LR}
   61 00000066 B002            ADD              SP, #8
   62 00000068 F85D BB04       POP              {R11}
   63 0000006C         
   64 0000006C         
   65 0000006C         ; put your lab 7 solution here
   66 0000006C 4770            BX               LR
   67 0000006E         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   68 0000006E         
   69 0000006E         ; -----------------------LCD _OutFix--------------------
                       --
   70 0000006E         ; Output characters to LCD display in fixed-point format
                       
   71 0000006E         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   72 0000006E         ; Inputs:  R0 is an unsigned 32-bit number
   73 0000006E         ; Outputs: none
   74 0000006E         ; E.g., R0=0,    then output "0.00 "



ARM Macro Assembler    Page 3 


   75 0000006E         ;       R0=3,    then output "0.03 "
   76 0000006E         ;       R0=89,   then output "0.89 "
   77 0000006E         ;       R0=123,  then output "1.23 "
   78 0000006E         ;       R0=999,  then output "9.99 "
   79 0000006E         ;       R0>999,  then output "*.** "
   80 0000006E         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   81 0000006E         LCD_OutFix
   82 0000006E F84D BD04       PUSH{FP}                     ; saving the value 
                                                            from register 11
   83 00000072 B401            PUSH{R0}                     ; storing the unsig
                                                            ned number on the s
                                                            tack
   84 00000074 B081            SUB              SP, #4      ; the space for cou
                                                            nt 
   85 00000076 46EB            MOV              FP, SP      ; making the frame 
                                                            pointer into R11 
   86 00000078 B500            PUSH             {LR}
   87 0000007A F04F 0100       MOV              R1, #0      ;making the count v
                                                            alue 0 and storing 
                                                            it back
   88 0000007E F8CB 1000       STR              R1, [FP,#CNT]
   89 00000082 F04F 010A       MOV              R1, #10     ; the ending of the
                                                             initialization cod
                                                            e 
   90 00000086 F5B0 7F7A       CMP              R0,#1000    ; checking to see i
                                                            f the number is les
                                                            s than 1000
   91 0000008A D310            BLO              inRan       ; if it is less tha
                                                            n 1000 that means t
                                                            he value is in rang
                                                            e 
   92 0000008C F04F 002A       MOV              R0, #0x2A   ; outputs for if th
                                                            e value is not belo
                                                            w 1000
   93 00000090 F7FF FFFE       BL               SSD1306_OutChar
   94 00000094 F04F 002E       MOV              R0, #0x2E
   95 00000098 F7FF FFFE       BL               SSD1306_OutChar
   96 0000009C F04F 002A       MOV              R0, #0x2A
   97 000000A0 F7FF FFFE       BL               SSD1306_OutChar
   98 000000A4 F04F 002A       MOV              R0, #0x2A
   99 000000A8 F7FF FFFE       BL               SSD1306_OutChar
  100 000000AC E02A            B                done
  101 000000AE         ;these steps are steps 2 and 3 from the out dec 
  102 000000AE F8DB 1000 
                       inRan   LDR              R1, [FP,#CNT] ; this is the sta
                                                            rt of the read loop
                                                            
  103 000000B2 F101 0101       ADD              R1, #1      ; adding one to the
                                                             count value 
  104 000000B6 F8CB 1000       STR              R1, [FP,#CNT]
  105 000000BA F04F 010A       MOV              R1, #10     ; this will be for 
                                                            dividing the number
                                                             
  106 000000BE F8DB 2004       LDR              R2, [FP,#N]
  107 000000C2 4613            MOV              R3,R2       ;making another cop
                                                            y of the number 
  108 000000C4 FBB2 F2F1       UDIV             R2, R2, R1  ; storing the divid
                                                            ed number back into



ARM Macro Assembler    Page 4 


                                                             n
  109 000000C8 F8CB 2004       STR              R2, [FP,#N]
  110 000000CC FB02 F201       MUL              R2, R2, R1
  111 000000D0 EBA3 0302       SUB              R3, R3, R2
  112 000000D4 B408            PUSH{R3}                     ; storing the diffe
                                                            rence on the stack-
                                                             contains the lowes
                                                            t weighted digit 
  113 000000D6 F8DB 1000       LDR              R1, [FP,#CNT] ; loading the cou
                                                            nt to the register 
                                                            
  114 000000DA 2903            CMP              R1, #3
  115 000000DC D3E7            BLO              inRan
  116 000000DE         ;same as step 4 in outdec 
  117 000000DE BC01            POP{R0}                      ; popping value fro
                                                            m stack and it gets
                                                             stored into R0 - t
                                                            his is the write lo
                                                            op
  118 000000E0 F100 0030       ADD              R0,R0, #0x30 ; making the ascii
                                                             value 
  119 000000E4 F7FF FFFE       BL               SSD1306_OutChar 
                                                            ;outputs the number
                                                            
  120 000000E8 F04F 002E       MOV              R0, #0x2E
  121 000000EC F7FF FFFE       BL               SSD1306_OutChar
  122 000000F0 BC01            POP{R0}                      ; popping value fro
                                                            m stack and it gets
                                                             stored into R0 - t
                                                            his is the write lo
                                                            op
  123 000000F2 F100 0030       ADD              R0,R0, #0x30 ; making the ascii
                                                             value 
  124 000000F6 F7FF FFFE       BL               SSD1306_OutChar 
                                                            ;outputs the number
                                                            
  125 000000FA BC01            POP{R0}                      ; popping value fro
                                                            m stack and it gets
                                                             stored into R0 - t
                                                            his is the write lo
                                                            op
  126 000000FC F100 0030       ADD              R0,R0, #0x30 ; making the ascii
                                                             value 
  127 00000100 F7FF FFFE       BL               SSD1306_OutChar 
                                                            ;outputs the number
                                                            
  128 00000104         
  129 00000104         done
  130 00000104 F85D EB04       POP{LR}
  131 00000108 B002            ADD              SP, #8
  132 0000010A F85D BB04       POP              {R11}
  133 0000010E         
  134 0000010E 4770            BX               LR
  135 00000110         
  136 00000110                 ALIGN
  137 00000110         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  138 00000110         
  139 00000110                 ALIGN                        ; make sure the end
                                                             of this section is



ARM Macro Assembler    Page 5 


                                                             aligned
  140 00000110                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab10 -IC:\Users\pandi\AppData\Loca
l\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\pandi\AppData\Local\A
rm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VERS
ION SETA 533" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --pr
edefine="_RTE_ SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 29 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000006E

Symbol: LCD_OutFix
   Definitions
      At line 81 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
done 00000104

Symbol: done
   Definitions
      At line 129 in file Print.s
   Uses
      At line 100 in file Print.s
Comment: done used once
inRan 000000AE

Symbol: inRan
   Definitions
      At line 102 in file Print.s
   Uses
      At line 91 in file Print.s
      At line 115 in file Print.s

moDiv 00000014

Symbol: moDiv
   Definitions
      At line 37 in file Print.s
   Uses
      At line 50 in file Print.s
Comment: moDiv used once
wri 00000044

Symbol: wri
   Definitions
      At line 51 in file Print.s
   Uses
      At line 59 in file Print.s
Comment: wri used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CNT 00000000

Symbol: CNT
   Definitions
      At line 21 in file Print.s
   Uses
      At line 36 in file Print.s
      At line 37 in file Print.s
      At line 39 in file Print.s
      At line 54 in file Print.s
      At line 56 in file Print.s
      At line 57 in file Print.s
      At line 88 in file Print.s
      At line 102 in file Print.s
      At line 104 in file Print.s
      At line 113 in file Print.s

N 00000004

Symbol: N
   Definitions
      At line 20 in file Print.s
   Uses
      At line 41 in file Print.s
      At line 44 in file Print.s
      At line 48 in file Print.s
      At line 106 in file Print.s
      At line 109 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SSD1306_OutChar 00000000

Symbol: SSD1306_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 53 in file Print.s
      At line 93 in file Print.s
      At line 95 in file Print.s
      At line 97 in file Print.s
      At line 99 in file Print.s
      At line 119 in file Print.s
      At line 121 in file Print.s
      At line 124 in file Print.s
      At line 127 in file Print.s

SSD1306_OutString 00000000

Symbol: SSD1306_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: SSD1306_OutString unused
2 symbols
344 symbols in table
